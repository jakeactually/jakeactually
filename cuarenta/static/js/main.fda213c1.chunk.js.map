{"version":3,"sources":["Home.js","amber.js","Room.js","JoinRoom.js","cards/10C.svg","cards/10D.svg","cards/10H.svg","cards/10S.svg","cards/2C.svg","cards/2D.svg","cards/2H.svg","cards/2S.svg","cards/3C.svg","cards/3D.svg","cards/3H.svg","cards/3S.svg","cards/4C.svg","cards/4D.svg","cards/4H.svg","cards/4S.svg","cards/5C.svg","cards/5D.svg","cards/5H.svg","cards/5S.svg","cards/6C.svg","cards/6D.svg","cards/6H.svg","cards/6S.svg","cards/7C.svg","cards/7D.svg","cards/7H.svg","cards/7S.svg","cards/8C.svg","cards/8D.svg","cards/8H.svg","cards/8S.svg","cards/9C.svg","cards/9D.svg","cards/9H.svg","cards/9S.svg","cards/AC.svg","cards/AD.svg","cards/AH.svg","cards/AS.svg","cards/JC.svg","cards/JD.svg","cards/JH.svg","cards/JS.svg","cards/KC.svg","cards/KD.svg","cards/KH.svg","cards/KS.svg","cards/QC.svg","cards/QD.svg","cards/QH.svg","cards/QS.svg","Game.js","App.js","reportWebVitals.js","index.js"],"names":["Home","match","history","useHistory","useState","userName","setUserName","useEffect","axios","get","then","data","name","type","placeholder","value","onChange","ev","target","required","className","onClick","makeARoom","a","query","URLSearchParams","append","post","status","push","room_id","EVENTS","now","Date","getTime","Channel","topic","socket","this","onMessageHandlers","ws","send","JSON","stringify","event","msg","forEach","handler","subject","callback","payload","Socket","endpoint","channels","lastPing","reconnectTries","attemptReconnect","time","clearTimeout","reconnectTimeout","setTimeout","connect","params","_reconnect","_reconnectInterval","pollingTimeout","_connectionIsStale","_poll","_startPolling","opts","location","window","hostname","port","protocol","Object","assign","Promise","resolve","reject","WebSocket","onmessage","handleMessage","onclose","onopen","_reset","close","channel","_handlePing","parsed_msg","parse","document","addEventListener","elements","querySelectorAll","i","e","preventDefault","message","getAttribute","confirm","form","createElement","input","setAttribute","appendChild","body","submit","length","prototype","toGranite","pad","number","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","Room","useRouteMatch","players","room","setRoom","setSocket","addToast","useToasts","id","response","join","on","map","player","play","roomId","appearance","autoDismiss","JoinRoom","FormData","set","symbols","S","C","H","D","count","Game","setSocketCount","handSelection","setHandSelection","Set","boardSelection","setBoardSelection","board","user","hand","game","setGame","class","current_player","points","card_points","actionClass","action","actionText","card","src","cards","has","toggle","item","delete","add","size","request","cardName","find","replace","char","defaults","baseURL","withCredentials","App","basename","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fda213c1.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const Home = ({ match }) => {\r\n    const history = useHistory();\r\n    const [userName, setUserName] = useState('');\r\n\r\n    useEffect(() => {\r\n        axios.get('/').then(({ data }) => {\r\n            setUserName(data.name);\r\n        });\r\n    }, []);\r\n    \r\n    return <main>\r\n        <form>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter a name\"\r\n                value={userName}\r\n                onChange={ev => setUserName(ev.target.value)}\r\n                required />\r\n            <br></br>\r\n            <button\r\n                type=\"button\"\r\n                className=\"blue-button\"\r\n                onClick={makeARoom(history, userName)}>\r\n                Make a room\r\n            </button>\r\n        </form>\r\n    </main>;\r\n};\r\n\r\nexport const makeARoom = (history, userName) => async () => {\r\n    const query = new URLSearchParams();\r\n    query.append('username', userName);\r\n    const { data, status } = await axios.post('/new-room', query);\r\n    \r\n    if (status === 401) {\r\n        history.push(`/join-room/${data.room_id}`);\r\n    } else {\r\n        history.push(`/room/${data.room_id}`);\r\n    }\r\n};\r\n","const EVENTS = {\r\n    join: 'join',\r\n    leave: 'leave',\r\n    message: 'message'\r\n  }\r\n  const STALE_CONNECTION_THRESHOLD_SECONDS = 100\r\n  const SOCKET_POLLING_RATE = 10000\r\n  \r\n  /**\r\n   * Returns a numeric value for the current time\r\n   */\r\n  let now = () => {\r\n    return new Date().getTime()\r\n  }\r\n  \r\n  /**\r\n   * Returns the difference between the current time and passed `time` in seconds\r\n   * @param {Number|Date} time - A numeric time or date object\r\n   */\r\n  let secondsSince = (time) => {\r\n    return (now() - time) / 1000\r\n  }\r\n  \r\n  /**\r\n   * Class for channel related functions (joining, leaving, subscribing and sending messages)\r\n   */\r\n  export class Channel {\r\n    /**\r\n     * @param {String} topic - topic to subscribe to\r\n     * @param {Socket} socket - A Socket instance\r\n     */\r\n    constructor(topic, socket) {\r\n      this.topic = topic\r\n      this.socket = socket\r\n      this.onMessageHandlers = []\r\n    }\r\n  \r\n    /**\r\n     * Join a channel, subscribe to all channels messages\r\n     */\r\n    join() {\r\n      this.socket.ws.send(JSON.stringify({ event: EVENTS.join, topic: this.topic }))\r\n    }\r\n  \r\n    /**\r\n     * Leave a channel, stop subscribing to channel messages\r\n     */\r\n    leave() {\r\n      this.socket.ws.send(JSON.stringify({ event: EVENTS.leave, topic: this.topic }))\r\n    }\r\n  \r\n    /**\r\n     * Calls all message handlers with a matching subject\r\n     */\r\n    handleMessage(msg) {\r\n      this.onMessageHandlers.forEach((handler) => {\r\n        if (handler.subject === msg.subject) handler.callback(msg.payload)\r\n      })\r\n    }\r\n  \r\n    /**\r\n     * Subscribe to a channel subject\r\n     * @param {String} subject - subject to listen for: `msg:new`\r\n     * @param {function} callback - callback function when a new message arrives\r\n     */\r\n    on(subject, callback) {\r\n      this.onMessageHandlers.push({ subject: subject, callback: callback })\r\n    }\r\n  \r\n    /**\r\n     * Send a new message to the channel\r\n     * @param {String} subject - subject to send message to: `msg:new`\r\n     * @param {Object} payload - payload object: `{message: 'hello'}`\r\n     */\r\n    push(subject, payload) {\r\n      this.socket.ws.send(JSON.stringify({ event: EVENTS.message, topic: this.topic, subject: subject, payload: payload }))\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Class for maintaining connection with server and maintaining channels list\r\n   */\r\n  export class Socket {\r\n    /**\r\n     * @param {String} endpoint - Websocket endpont used in routes.cr file\r\n     */\r\n    constructor(endpoint) {\r\n      this.endpoint = endpoint\r\n      this.ws = null\r\n      this.channels = []\r\n      this.lastPing = now()\r\n      this.reconnectTries = 0\r\n      this.attemptReconnect = true\r\n    }\r\n  \r\n    /**\r\n     * Returns whether or not the last received ping has been past the threshold\r\n     */\r\n    _connectionIsStale() {\r\n      return secondsSince(this.lastPing) > STALE_CONNECTION_THRESHOLD_SECONDS\r\n    }\r\n  \r\n    /**\r\n     * Tries to reconnect to the websocket server using a recursive timeout\r\n     */\r\n    _reconnect() {\r\n      clearTimeout(this.reconnectTimeout)\r\n      this.reconnectTimeout = setTimeout(() => {\r\n        this.reconnectTries++\r\n        this.connect(this.params)\r\n        this._reconnect()\r\n      }, this._reconnectInterval())\r\n    }\r\n  \r\n    /**\r\n     * Returns an incrementing timeout interval based around the number of reconnection retries\r\n     */\r\n    _reconnectInterval() {\r\n      return [1000, 2000, 5000, 10000][this.reconnectTries] || 10000\r\n    }\r\n  \r\n    /**\r\n     * Sets a recursive timeout to check if the connection is stale\r\n     */\r\n    _poll() {\r\n      this.pollingTimeout = setTimeout(() => {\r\n        if (this._connectionIsStale()) {\r\n          this._reconnect()\r\n        } else {\r\n          this._poll()\r\n        }\r\n      }, SOCKET_POLLING_RATE)\r\n    }\r\n  \r\n    /**\r\n     * Clear polling timeout and start polling\r\n     */\r\n    _startPolling() {\r\n      clearTimeout(this.pollingTimeout)\r\n      this._poll()\r\n    }\r\n  \r\n    /**\r\n     * Sets `lastPing` to the curent time\r\n     */\r\n    _handlePing() {\r\n      this.lastPing = now()\r\n    }\r\n  \r\n    /**\r\n     * Clears reconnect timeout, resets variables an starts polling\r\n     */\r\n    _reset() {\r\n      clearTimeout(this.reconnectTimeout)\r\n      this.reconnectTries = 0\r\n      this.attemptReconnect = true\r\n      this._startPolling()\r\n    }\r\n  \r\n    /**\r\n     * Connect the socket to the server, and binds to native ws functions\r\n     * @param {Object} params - Optional parameters\r\n     * @param {String} params.location - Hostname to connect to, defaults to `window.location.hostname`\r\n     * @param {String} parmas.port - Port to connect to, defaults to `window.location.port`\r\n     * @param {String} params.protocol - Protocol to use, either 'wss' or 'ws'\r\n     */\r\n    connect(params) {\r\n      this.params = params\r\n  \r\n      let opts = {\r\n        location: window.location.hostname,\r\n        port: window.location.port,\r\n        protocol: window.location.protocol === 'https:' ? 'wss:' : 'ws:',\r\n      }\r\n  \r\n      if (params) Object.assign(opts, params)\r\n      if (opts.port) opts.location += `:${opts.port}`\r\n  \r\n      return new Promise((resolve, reject) => {\r\n        this.ws = new WebSocket(`${opts.protocol}//${opts.location}${this.endpoint}`)\r\n        this.ws.onmessage = (msg) => { this.handleMessage(msg) }\r\n        this.ws.onclose = () => {\r\n          if (this.attemptReconnect) this._reconnect()\r\n        }\r\n        this.ws.onopen = () => {\r\n          this._reset()\r\n          resolve()\r\n        }\r\n      })\r\n    }\r\n  \r\n    /**\r\n     * Closes the socket connection permanently\r\n     */\r\n    disconnect() {\r\n      this.attemptReconnect = false\r\n      clearTimeout(this.pollingTimeout)\r\n      clearTimeout(this.reconnectTimeout)\r\n      this.ws.close()\r\n    }\r\n  \r\n    /**\r\n     * Adds a new channel to the socket channels list\r\n     * @param {String} topic - Topic for the channel: `chat_room:123`\r\n     */\r\n    channel(topic) {\r\n      let channel = new Channel(topic, this)\r\n      this.channels.push(channel)\r\n      return channel\r\n    }\r\n  \r\n    /**\r\n     * Message handler for messages received\r\n     * @param {MessageEvent} msg - Message received from ws\r\n     */\r\n    handleMessage(msg) {\r\n      if (msg.data === \"ping\") return this._handlePing()\r\n  \r\n      let parsed_msg = JSON.parse(msg.data)\r\n      this.channels.forEach((channel) => {\r\n        if (channel.topic === parsed_msg.topic) channel.handleMessage(parsed_msg)\r\n      })\r\n    }\r\n  }\r\n  \r\n  export default {\r\n    Channel,\r\n    Socket\r\n  };\r\n  \r\n  /**\r\n   * Allows delete links to post for security and ease of use similar to Rails jquery_ujs\r\n   */\r\n  document.addEventListener(\"DOMContentLoaded\", () => {\r\n    let elements = document.querySelectorAll(\"a[data-method='delete']\");\r\n    for (let i = 0; i < elements.length; i++) {\r\n      elements[i].addEventListener(\"click\", (e) => {\r\n        e.preventDefault();\r\n        let message = elements[i].getAttribute(\"data-confirm\") || \"Are you sure?\";\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (confirm(message)) {\r\n          let form = document.createElement(\"form\");\r\n          let input = document.createElement(\"input\");\r\n          form.setAttribute(\"action\", elements[i].getAttribute(\"href\"));\r\n          form.setAttribute(\"method\", \"POST\");\r\n          input.setAttribute(\"type\", \"hidden\");\r\n          input.setAttribute(\"name\", \"_method\");\r\n          input.setAttribute(\"value\", \"DELETE\");\r\n          form.appendChild(input);\r\n          document.body.appendChild(form);\r\n          form.submit();\r\n        }\r\n        return false;\r\n      })\r\n    }\r\n  });\r\n  \r\n  if (!Date.prototype.toGranite) {\r\n    (function() {\r\n  \r\n      function pad(number) {\r\n        if (number < 10) {\r\n          return '0' + number;\r\n        }\r\n        return number;\r\n      }\r\n  \r\n      Date.prototype.toGranite = function() {\r\n        return this.getUTCFullYear() +\r\n          '-' + pad(this.getUTCMonth() + 1) +\r\n          '-' + pad(this.getUTCDate()) +\r\n          ' ' + pad(this.getUTCHours()) +\r\n          ':' + pad(this.getUTCMinutes()) +\r\n          ':' + pad(this.getUTCSeconds())  ;\r\n      };\r\n  \r\n    }());\r\n  }\r\n  ","import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { Socket } from './amber';\r\nimport { useToasts } from 'react-toast-notifications';\r\n\r\nexport const Room = () => {\r\n    const { params } = useRouteMatch();\r\n    const history = useHistory();\r\n    const [room, setRoom] = useState({ players: [] });\r\n    const [socket, setSocket] = useState(0);\r\n    const { addToast } = useToasts();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const { data } = await axios.get(`/room/${params.id}`);\r\n                setRoom(data);\r\n            } catch (error) {\r\n                if (error.response.status === 401) {\r\n                    history.push(`/join-room/${params.id}`);\r\n                }\r\n            }\r\n        })();\r\n    }, [socket]);\r\n\r\n    useEffect(() => {\r\n        const socket = new Socket('/cuarenta/api/state');\r\n        \r\n        socket.connect().then(() => {\r\n            const channel = socket.channel(`cuarenta_room:${params.id}`);\r\n            channel.join();\r\n            channel.on('message_new', () => {\r\n                setSocket(socket + 1);\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    return <main>\r\n        <form>\r\n            <div id=\"room-id\">Room #{params.id}</div>\r\n\r\n            <p id=\"invite-text\">\r\n                You can invite others by sharing the link of this page\r\n            </p>\r\n\r\n            <div id=\"player-names\">\r\n                { room.players.map((player, i) =>\r\n                <div key={i} className=\"player-name\">\r\n                    {player.name}\r\n                </div>)\r\n                }\r\n            </div>\r\n\r\n            <button\r\n                type=\"button\"\r\n                className=\"blue-button down\"\r\n                onClick={play(history, params.id, room, addToast)}>\r\n                Play\r\n            </button>\r\n            <button type=\"button\" className=\"blue-button\">\r\n                Leave\r\n            </button>\r\n        </form>\r\n    </main>;\r\n};\r\n\r\nexport const play = (history, roomId, room, addToast) => () => {\r\n    if (room.players.length == 2 || room.players.length == 4) {\r\n        history.push(`/play/${roomId}`);\r\n    } else {\r\n        addToast('There must be 2 or 4 players', {\r\n            appearance: 'error',\r\n            autoDismiss: true\r\n        });\r\n    }\r\n};\r\n","import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\n\r\nexport const JoinRoom = () => {\r\n    const history = useHistory();\r\n    const { params } = useRouteMatch();\r\n    const [userName, setUserName] = useState('');\r\n\r\n    useEffect(() => {\r\n        axios.get('/').then(({ data }) => {\r\n            setUserName(data.name);\r\n        });\r\n    }, []);\r\n    \r\n    return <main>\r\n        <form>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter a name\"\r\n                value={userName}\r\n                onChange={ev => setUserName(ev.target.value)}\r\n                required />\r\n            <br></br>\r\n            <button            \r\n                type=\"button\"\r\n                className=\"blue-button\"\r\n                onClick={makeARoom(history, userName, params.id)}>\r\n                Join room #{params.id}\r\n            </button>\r\n        </form>\r\n    </main>;\r\n};\r\n\r\nexport const makeARoom = (history, userName, roomId) => async () => {\r\n    const form = new FormData();\r\n    form.set('username', userName);\r\n    const { data } = await axios.post(`/join-room/${roomId}`, form);\r\n    history.push(`/room/${data.room_id}`);\r\n};\r\n","export default __webpack_public_path__ + \"static/media/10C.ca0996ab.svg\";","export default __webpack_public_path__ + \"static/media/10D.2f1fc168.svg\";","export default __webpack_public_path__ + \"static/media/10H.bedaae79.svg\";","export default __webpack_public_path__ + \"static/media/10S.c50751e2.svg\";","export default __webpack_public_path__ + \"static/media/2C.47915b3c.svg\";","export default __webpack_public_path__ + \"static/media/2D.1c975640.svg\";","export default __webpack_public_path__ + \"static/media/2H.bb3f5ea9.svg\";","export default __webpack_public_path__ + \"static/media/2S.f007f6fd.svg\";","export default __webpack_public_path__ + \"static/media/3C.11ef8837.svg\";","export default __webpack_public_path__ + \"static/media/3D.de421c6c.svg\";","export default __webpack_public_path__ + \"static/media/3H.e877ee52.svg\";","export default __webpack_public_path__ + \"static/media/3S.323e2171.svg\";","export default __webpack_public_path__ + \"static/media/4C.df3c1d7d.svg\";","export default __webpack_public_path__ + \"static/media/4D.b0adcfd2.svg\";","export default __webpack_public_path__ + \"static/media/4H.c01f6d50.svg\";","export default __webpack_public_path__ + \"static/media/4S.d20f14a9.svg\";","export default __webpack_public_path__ + \"static/media/5C.f6f85820.svg\";","export default __webpack_public_path__ + \"static/media/5D.b3553ee5.svg\";","export default __webpack_public_path__ + \"static/media/5H.9ba68654.svg\";","export default __webpack_public_path__ + \"static/media/5S.9d718b3e.svg\";","export default __webpack_public_path__ + \"static/media/6C.9bdaddb8.svg\";","export default __webpack_public_path__ + \"static/media/6D.0bd8541b.svg\";","export default __webpack_public_path__ + \"static/media/6H.6d245a5a.svg\";","export default __webpack_public_path__ + \"static/media/6S.cec37dc9.svg\";","export default __webpack_public_path__ + \"static/media/7C.c255ee4f.svg\";","export default __webpack_public_path__ + \"static/media/7D.31fc92f7.svg\";","export default __webpack_public_path__ + \"static/media/7H.5063fce3.svg\";","export default __webpack_public_path__ + \"static/media/7S.12b4f48a.svg\";","export default __webpack_public_path__ + \"static/media/8C.903dd16c.svg\";","export default __webpack_public_path__ + \"static/media/8D.930c615a.svg\";","export default __webpack_public_path__ + \"static/media/8H.d5968a9e.svg\";","export default __webpack_public_path__ + \"static/media/8S.77723fd3.svg\";","export default __webpack_public_path__ + \"static/media/9C.f09638a9.svg\";","export default __webpack_public_path__ + \"static/media/9D.0d6db1b1.svg\";","export default __webpack_public_path__ + \"static/media/9H.41046ebd.svg\";","export default __webpack_public_path__ + \"static/media/9S.2e0e0e86.svg\";","export default __webpack_public_path__ + \"static/media/AC.034e45f3.svg\";","export default __webpack_public_path__ + \"static/media/AD.9255198c.svg\";","export default __webpack_public_path__ + \"static/media/AH.f746dd96.svg\";","export default __webpack_public_path__ + \"static/media/AS.9c74e60e.svg\";","export default __webpack_public_path__ + \"static/media/JC.082bc2b0.svg\";","export default __webpack_public_path__ + \"static/media/JD.eabe6031.svg\";","export default __webpack_public_path__ + \"static/media/JH.dd9b1fd4.svg\";","export default __webpack_public_path__ + \"static/media/JS.4c0c6359.svg\";","export default __webpack_public_path__ + \"static/media/KC.91ba7481.svg\";","export default __webpack_public_path__ + \"static/media/KD.0d4d040e.svg\";","export default __webpack_public_path__ + \"static/media/KH.961f1abb.svg\";","export default __webpack_public_path__ + \"static/media/KS.a20d2623.svg\";","export default __webpack_public_path__ + \"static/media/QC.c51b2716.svg\";","export default __webpack_public_path__ + \"static/media/QD.e5d856cb.svg\";","export default __webpack_public_path__ + \"static/media/QH.a4065fb2.svg\";","export default __webpack_public_path__ + \"static/media/QS.b4b02a0c.svg\";","import * as cards from './Cards';\r\nimport { Set } from 'immutable';\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {   useRouteMatch } from \"react-router-dom\";\r\nimport { useToasts } from 'react-toast-notifications';\r\nimport { Socket } from './amber';\r\n\r\nconst symbols = {\r\n    S: '♠',\r\n    C: '♣',\r\n    H: '♥',\r\n    D: '♦',\r\n};\r\n\r\nlet count = 0;\r\n\r\nexport const Game = () => {\r\n    const { params } = useRouteMatch();\r\n    const { addToast } = useToasts();\r\n    \r\n    const [socketCount, setSocketCount] = useState(0);\r\n    const [handSelection, setHandSelection] = useState(null);\r\n    const [boardSelection, setBoardSelection] = useState(new Set());\r\n    const [game, setGame] = useState({\r\n        room: {\r\n            players: [],\r\n            board: []\r\n        },\r\n        user: {\r\n            hand: []\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        axios.get(`/play/${params.id}`).then(({ data }) => {\r\n            setGame(data);\r\n        });\r\n    }, [count]);\r\n\r\n    useEffect(() => {\r\n        const socket = new Socket('/cuarenta/api/state');\r\n        \r\n        socket.connect().then(() => {\r\n            const channel = socket.channel(`cuarenta_room:${params.id}`);\r\n            channel.join();\r\n            channel.on('message_new', () => {\r\n                setSocketCount(++count);\r\n            });\r\n        });\r\n    }, []);\r\n    \r\n    return (\r\n        <main>\r\n            <div id=\"control\">\r\n                <div id=\"players\">\r\n                    <div class=\"player legend\">\r\n                        <br></br>\r\n                        POINTS<br></br>\r\n                        CARDS\r\n                    </div>\r\n                    {game.room.players.map(player =>\r\n                    <div className={player.id == game.room.current_player.id ? 'current player' : 'player'}>\r\n                        <div>{player.name}</div>\r\n                        <div>\r\n                            <div>\r\n                                {player.points}\r\n                            </div>\r\n                            <div>\r\n                                {player.card_points}\r\n                            </div>\r\n                        </div>\r\n                    </div>)}\r\n                </div>\r\n                \r\n                <button\r\n                    id=\"action\"\r\n                    className={actionClass(handSelection, boardSelection)}\r\n                    onClick={action(handSelection, boardSelection, params.id,\r\n                        addToast, setHandSelection, game.room.board, setBoardSelection)}>\r\n                    {actionText(handSelection, boardSelection)}\r\n                </button>\r\n            </div>\r\n            <div className=\"form\">\r\n                <div id=\"board\">\r\n                    {game.room.board.map(card =>\r\n                    <img\r\n                        src={cards[`card_${card.name}`]}\r\n                        className={boardSelection.has(card.name) ? 'selected' : ''}\r\n                        onClick={() => setBoardSelection(toggle(boardSelection, card.name))} />)}\r\n                </div>\r\n                <div id=\"hand\">\r\n                    {game.user.hand.map(card =>\r\n                    <img\r\n                    src={cards[`card_${card.name}`]}\r\n                    className={handSelection && handSelection.name === card.name ? 'selected' : ''}\r\n                    onClick={() => setHandSelection(card)} />)}\r\n                </div>\r\n            </div>\r\n        </main>\r\n    )\r\n};\r\n\r\nconst toggle = (set, item) => set.has(item) ? set.delete(item) : set.add(item);\r\n\r\nconst action = (handSelection, boardSelection,\r\n    roomId, addToast, setHandSelection, board, setBoardSelection) => async () => {\r\n\r\n    let action;\r\n    if (handSelection) {\r\n        action = 'sum';\r\n    } else if (boardSelection.size) {\r\n        action = 'claim';\r\n    } else {\r\n        action = 'pass';\r\n    }\r\n    \r\n    const request = {\r\n        action,\r\n        hand: handSelection,\r\n        board: [...boardSelection].map(cardName =>\r\n            board.find(card => card.name == cardName)\r\n        )\r\n    };\r\n\r\n    try {\r\n        await axios.post(`/turn/${roomId}`, request);\r\n        \r\n        if (action == 'pass') {\r\n        }\r\n    } catch (error) {\r\n        addToast(error.response.data, {\r\n            appearance: 'error',\r\n            autoDismiss: true\r\n        });\r\n    }\r\n\r\n    setBoardSelection(new Set());\r\n    setHandSelection(null);\r\n};\r\n\r\nconst actionText = (handSelection, boardSelection) => {\r\n    if (handSelection) {\r\n        if (!boardSelection.size) {\r\n            return 'THROW ' + handSelection.name.replace(/[SCHD]/g, char => symbols[char]);\r\n        }\r\n\r\n        return 'SUM ' + [handSelection.name, ...boardSelection]\r\n            .join(' + ')\r\n            .replace(/[SCHD]/g, char => symbols[char]);\r\n    }\r\n\r\n    if (boardSelection.size) {\r\n        return 'CLAIM ' + [...boardSelection]\r\n            .join(', ')\r\n            .replace(/[SCHD]/g, char => symbols[char]);\r\n    }\r\n\r\n    return 'PASS';\r\n};\r\n\r\nconst actionClass = (handSelection, boardSelection) => {\r\n    if (handSelection) {\r\n        return '';\r\n    }\r\n\r\n    if (boardSelection.size) {\r\n        return '';\r\n    }\r\n\r\n    return 'disabled';\r\n};\r\n","import './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { ToastProvider } from 'react-toast-notifications';\n\nimport { Home } from './Home';\nimport { Room } from './Room';\nimport { JoinRoom } from './JoinRoom';\nimport { Game } from './Game';\nimport axios from 'axios';\n\naxios.defaults.baseURL = '/cuarenta/api';\naxios.defaults.withCredentials = true;\n\nfunction App() {\n  return (\n    <Router basename=\"/cuarenta\">\n      <ToastProvider>\n        <div>\n          <Switch>\n            <Route path=\"/room/:id\">\n              <Room />\n            </Route>\n            <Route path=\"/join-room/:id\">\n              <JoinRoom />\n            </Route>\n            <Route path=\"/play/:id\">\n              <Game />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </ToastProvider>\n    </Router>\n  );\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}